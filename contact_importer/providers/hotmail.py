###-*- coding: utf-8 -*-#################################
import urllib, urllib2
import xml.dom.minidom

from ..lib.WindowsLiveLogin import WindowsLiveLogin
from .base import BaseContacts

class HotmailContacts(BaseContacts):

    def __init__(self, consumer_key, consumer_secret, policy_url, *args, **kwargs):
        """
        Initial function,
        Keyword arguments:
            - **consumer_key** -- Client ID key. Generated by Microsoft while new app registration
            - **consumer_secret** -- Client secret key. Generated by Microsoft while new app registration
            - **policy_url** -- Some url with Policy information
            additional for step 2:
            - **post_params** -- a dict with post data given from MS server after user authentification
        """
        self.consumer_key = consumer_key
        self.consumer_secret = consumer_secret
        self.policy_url = policy_url

        super(HotmailContacts, self).__init__(*args, **kwargs)

    def get_tokens(self, *args, **kwargs):
        """
        Does nothing. Added only for
        """
        self.return_url = args[0]
        return {}

    def get_auth_url(self):
        wll = WindowsLiveLogin(appid=self.consumer_key, secret=self.consumer_secret, policyurl=self.policy_url, returnurl=self.return_url)
        return wll.getConsentUrl("Contacts.View")

    def get_contacts(self):
        """
        Implements a generator for iterating in contacts
        """
        wll = WindowsLiveLogin(appid=self.consumer_key, secret=self.consumer_secret, policyurl=self.policy_url)

        consent_token = wll.processConsent(self.post_params)

        if not consent_token or not consent_token.isValid():
            raise Exception('Cannot give a contact list.')

        lid = consent_token.getLocationID()
        lid16 = int(lid, 16)
        to_signed_64 = lambda x: x < 2**63 and x or x - 2**64
        lid_s64 = to_signed_64(lid16)
        url = 'https://livecontacts.services.live.com/users/@C@%s/rest/invitationsbyemail' % lid_s64
        req = urllib2.Request(url)
        req.add_header(
            'Authorization', 'DelegatedToken dt="%s"' % urllib.unquote(consent_token.getDelegationToken())
        )
        response = urllib2.build_opener().open(req)
        return self.parse_contacts(response.read())

    def parse_contacts(self, xml_string):
        dom = xml.dom.minidom.parseString(xml_string)
        xml_contacts = dom.getElementsByTagName("Contact")
        contacts = []
        if xml_contacts:
            for contact in xml_contacts:
                email = contact.getElementsByTagName("PreferredEmail")
                if not email:
                    continue

                name = []
                try:
                    name.append(contact.getElementsByTagName("FirstName")[0].childNodes[0].data)
                except Exception:
                    pass

                try:
                    name.append(contact.getElementsByTagName("LastName")[0].childNodes[0].data)
                except Exception:
                    pass

                contacts.append({
                    'name': ' '.join(name),
                    'emails': [email[0].childNodes[0].data, ]
                })
        return contacts