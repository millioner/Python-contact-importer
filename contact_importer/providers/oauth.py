import urllib

import oauth2 as oauth

from .base import BaseContacts


class OAuthContacts(BaseContacts):
    """
    Abstract class for contact importing via OAuth protocol.
    General information about OAuth can be readed here http://hueniverse.com/oauth/guide/
    """

    request_token_url = None
    access_token_url = None
    authorize_url = None

    get_contacts_url = None

    scope_urls = []

    def __init__(self, consumer_key, consumer_secret, *args, **kwargs):
        """
        Init function
        Keyword params:
            - **consumer_key** -- OAuth Consumer Key, should be generated by your OAuth provider
            - **consumer_secret** -- OAuth Consumer Secret Key, should be generated by your OAuth provider
            only for step 2:
            - **oauth_token** -- request token, got by `get_tokens` function while step 1
            - **oauth_token_secret** -- secret request token, got by `get_tokens` function while step 1
            - **oauth_verifier** -- GET param that is passed to the server
                                    when user is redirected back from the content provider
        """
        self.consumer_key = consumer_key
        self.consumer_secret = consumer_secret
        self.consumer = oauth.Consumer(consumer_key, consumer_secret)

        super(OAuthContacts, self).__init__(*args, **kwargs)

    def get_params(self, oauth_callback):
        params = {"oauth_callback": oauth_callback}
        if self.scope_urls:
            params["scope"] = " ".join(self.scope_urls)
        return urllib.urlencode(params)

    def get_tokens(self, oauth_callback):
        """
        Step 1
        Receives a request oauth_token and oauth_token_secret from an OAuth provider and returns it.
        Tokens should be saved and passed to the class at the step 2
        """
        client = oauth.Client(self.consumer)

        resp, content = client.request(
            "%s?%s" % (self.request_token_url, self.get_params(oauth_callback)),
            method="GET",
        )
        if resp["status"] != "200":
            raise Exception("Invalid response %s." % resp["status"])

        token = dict(urllib.parse.parse_qsl(content))
        self.oauth_token = token.get("oauth_token")
        self.oauth_token_secret = token.get("oauth_token_secret")

        return {
            "oauth_token": self.oauth_token,
            "oauth_token_secret": self.oauth_token_secret,
        }

    def get_auth_url(self):
        """
        Step 1
        Returns an url for auth user redirecting
        """
        if self.oauth_token:
            return "%s?oauth_token=%s" % (self.authorize_url, self.oauth_token)
        else:
            raise AttributeError(
                "Request token is missing. Auth url cannot be generated."
            )

    def receive_access_tokens(self):
        """
        Step 2
        Receives final access tokens.
        """
        token = oauth.Token(self.oauth_token, self.oauth_token_secret)
        token.set_verifier(self.oauth_verifier)
        client = oauth.Client(self.consumer, token)
        resp, content = client.request(self.access_token_url, "GET")
        res_token = dict(urllib.parse.parse_qsl(content))
        self.access_token = res_token.get("oauth_token")
        self.access_token_secret = res_token.get("oauth_token_secret")

    def get_contacts(self):
        if not hasattr(self, "access_token") or not hasattr(
            self, "access_token_secret"
        ):
            self.receive_access_tokens()
